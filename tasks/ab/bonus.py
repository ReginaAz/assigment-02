from __future__ import annotations


def generate_json(depth: int, **kwargs: str):
    """
    Функция генерирует json-объект глубины depth, удовлетворяющий заданному с
    помощью именных аргументов шаблону
    """
    ...


def preprocess(f: Callable, **kwargs: Callable):
    """
    Функция принимает другую функцию f и набор аргументов вида key=value, и
    возвращает новую функцию, которая копирует поведение f, но перед этим
    трансформирует аргументы с именами key соответствующим value
    """

    def _invoke(*args, **kwargs):
        ...

    return _invoke


def memoize(*, cache_size: int | None = None):
    """
    Функция принимает ограничение на размер кэша и возвращает декоратор, под
    которым результаты последних cache_size вызовов декорируемой функции от
    одного аргумента будут запоминаться и возвращаться немедленно при повторном
    вызове с тем же аргументом

    Для проверки можно раскомментировать находящийся ниже код и убедиться, что
    большие числа Фибоначчи вычисляются быстро
    """
    ...

@memoize(cache_size=None)
def fibonacci(n):
    return 1 if n <= 1 else fibonacci(n - 1) + fibonacci(n - 2)
